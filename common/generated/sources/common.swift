// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(commonFFI)
import commonFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_common_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_common_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
                throw CancellationError()

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


public struct Config {
    public var enabled: Bool
    public var startupControl: Control
    public var gain: UInt8
    public var pwmFreq: UInt16
    public var maxTargetCurrent: UInt16
    public var absMaxLoadCurrent: UInt16
    public var throttleStart: UInt8
    public var throttleStop: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(enabled: Bool, startupControl: Control, gain: UInt8, pwmFreq: UInt16, maxTargetCurrent: UInt16, absMaxLoadCurrent: UInt16, throttleStart: UInt8, throttleStop: UInt8) {
        self.enabled = enabled
        self.startupControl = startupControl
        self.gain = gain
        self.pwmFreq = pwmFreq
        self.maxTargetCurrent = maxTargetCurrent
        self.absMaxLoadCurrent = absMaxLoadCurrent
        self.throttleStart = throttleStart
        self.throttleStop = throttleStop
    }
}


extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.enabled != rhs.enabled {
            return false
        }
        if lhs.startupControl != rhs.startupControl {
            return false
        }
        if lhs.gain != rhs.gain {
            return false
        }
        if lhs.pwmFreq != rhs.pwmFreq {
            return false
        }
        if lhs.maxTargetCurrent != rhs.maxTargetCurrent {
            return false
        }
        if lhs.absMaxLoadCurrent != rhs.absMaxLoadCurrent {
            return false
        }
        if lhs.throttleStart != rhs.throttleStart {
            return false
        }
        if lhs.throttleStop != rhs.throttleStop {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(enabled)
        hasher.combine(startupControl)
        hasher.combine(gain)
        hasher.combine(pwmFreq)
        hasher.combine(maxTargetCurrent)
        hasher.combine(absMaxLoadCurrent)
        hasher.combine(throttleStart)
        hasher.combine(throttleStop)
    }
}


public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return try Config(
            enabled: FfiConverterBool.read(from: &buf), 
            startupControl: FfiConverterTypeControl.read(from: &buf), 
            gain: FfiConverterUInt8.read(from: &buf), 
            pwmFreq: FfiConverterUInt16.read(from: &buf), 
            maxTargetCurrent: FfiConverterUInt16.read(from: &buf), 
            absMaxLoadCurrent: FfiConverterUInt16.read(from: &buf), 
            throttleStart: FfiConverterUInt8.read(from: &buf), 
            throttleStop: FfiConverterUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.enabled, into: &buf)
        FfiConverterTypeControl.write(value.startupControl, into: &buf)
        FfiConverterUInt8.write(value.gain, into: &buf)
        FfiConverterUInt16.write(value.pwmFreq, into: &buf)
        FfiConverterUInt16.write(value.maxTargetCurrent, into: &buf)
        FfiConverterUInt16.write(value.absMaxLoadCurrent, into: &buf)
        FfiConverterUInt8.write(value.throttleStart, into: &buf)
        FfiConverterUInt8.write(value.throttleStop, into: &buf)
    }
}


public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}


public struct Control {
    public var target: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(target: UInt16) {
        self.target = target
    }
}


extension Control: Equatable, Hashable {
    public static func ==(lhs: Control, rhs: Control) -> Bool {
        if lhs.target != rhs.target {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(target)
    }
}


public struct FfiConverterTypeControl: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Control {
        return try Control(
            target: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: Control, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.target, into: &buf)
    }
}


public func FfiConverterTypeControl_lift(_ buf: RustBuffer) throws -> Control {
    return try FfiConverterTypeControl.lift(buf)
}

public func FfiConverterTypeControl_lower(_ value: Control) -> RustBuffer {
    return FfiConverterTypeControl.lower(value)
}


public struct Monitor {
    public var duty: UInt16
    public var upperCurrent: UInt16
    public var lowerCurrent: UInt16
    public var temperature: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(duty: UInt16, upperCurrent: UInt16, lowerCurrent: UInt16, temperature: UInt16) {
        self.duty = duty
        self.upperCurrent = upperCurrent
        self.lowerCurrent = lowerCurrent
        self.temperature = temperature
    }
}


extension Monitor: Equatable, Hashable {
    public static func ==(lhs: Monitor, rhs: Monitor) -> Bool {
        if lhs.duty != rhs.duty {
            return false
        }
        if lhs.upperCurrent != rhs.upperCurrent {
            return false
        }
        if lhs.lowerCurrent != rhs.lowerCurrent {
            return false
        }
        if lhs.temperature != rhs.temperature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(duty)
        hasher.combine(upperCurrent)
        hasher.combine(lowerCurrent)
        hasher.combine(temperature)
    }
}


public struct FfiConverterTypeMonitor: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Monitor {
        return try Monitor(
            duty: FfiConverterUInt16.read(from: &buf), 
            upperCurrent: FfiConverterUInt16.read(from: &buf), 
            lowerCurrent: FfiConverterUInt16.read(from: &buf), 
            temperature: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: Monitor, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.duty, into: &buf)
        FfiConverterUInt16.write(value.upperCurrent, into: &buf)
        FfiConverterUInt16.write(value.lowerCurrent, into: &buf)
        FfiConverterUInt16.write(value.temperature, into: &buf)
    }
}


public func FfiConverterTypeMonitor_lift(_ buf: RustBuffer) throws -> Monitor {
    return try FfiConverterTypeMonitor.lift(buf)
}

public func FfiConverterTypeMonitor_lower(_ value: Monitor) -> RustBuffer {
    return FfiConverterTypeMonitor.lower(value)
}


public struct Properties {
    public var version: Version
    public var absMaxMa: UInt16
    public var absMaxTemp: UInt16
    public var minPwmFreq: UInt16
    public var maxPwmFreq: UInt16
    public var maxAdcError: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(version: Version, absMaxMa: UInt16, absMaxTemp: UInt16, minPwmFreq: UInt16, maxPwmFreq: UInt16, maxAdcError: UInt16) {
        self.version = version
        self.absMaxMa = absMaxMa
        self.absMaxTemp = absMaxTemp
        self.minPwmFreq = minPwmFreq
        self.maxPwmFreq = maxPwmFreq
        self.maxAdcError = maxAdcError
    }
}


extension Properties: Equatable, Hashable {
    public static func ==(lhs: Properties, rhs: Properties) -> Bool {
        if lhs.version != rhs.version {
            return false
        }
        if lhs.absMaxMa != rhs.absMaxMa {
            return false
        }
        if lhs.absMaxTemp != rhs.absMaxTemp {
            return false
        }
        if lhs.minPwmFreq != rhs.minPwmFreq {
            return false
        }
        if lhs.maxPwmFreq != rhs.maxPwmFreq {
            return false
        }
        if lhs.maxAdcError != rhs.maxAdcError {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(version)
        hasher.combine(absMaxMa)
        hasher.combine(absMaxTemp)
        hasher.combine(minPwmFreq)
        hasher.combine(maxPwmFreq)
        hasher.combine(maxAdcError)
    }
}


public struct FfiConverterTypeProperties: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Properties {
        return try Properties(
            version: FfiConverterTypeVersion.read(from: &buf), 
            absMaxMa: FfiConverterUInt16.read(from: &buf), 
            absMaxTemp: FfiConverterUInt16.read(from: &buf), 
            minPwmFreq: FfiConverterUInt16.read(from: &buf), 
            maxPwmFreq: FfiConverterUInt16.read(from: &buf), 
            maxAdcError: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: Properties, into buf: inout [UInt8]) {
        FfiConverterTypeVersion.write(value.version, into: &buf)
        FfiConverterUInt16.write(value.absMaxMa, into: &buf)
        FfiConverterUInt16.write(value.absMaxTemp, into: &buf)
        FfiConverterUInt16.write(value.minPwmFreq, into: &buf)
        FfiConverterUInt16.write(value.maxPwmFreq, into: &buf)
        FfiConverterUInt16.write(value.maxAdcError, into: &buf)
    }
}


public func FfiConverterTypeProperties_lift(_ buf: RustBuffer) throws -> Properties {
    return try FfiConverterTypeProperties.lift(buf)
}

public func FfiConverterTypeProperties_lower(_ value: Properties) -> RustBuffer {
    return FfiConverterTypeProperties.lower(value)
}


public struct Status {
    public var mode: Mode
    public var error: HeadlightError

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(mode: Mode, error: HeadlightError) {
        self.mode = mode
        self.error = error
    }
}


extension Status: Equatable, Hashable {
    public static func ==(lhs: Status, rhs: Status) -> Bool {
        if lhs.mode != rhs.mode {
            return false
        }
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(mode)
        hasher.combine(error)
    }
}


public struct FfiConverterTypeStatus: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Status {
        return try Status(
            mode: FfiConverterTypeMode.read(from: &buf), 
            error: FfiConverterTypeHeadlightError.read(from: &buf)
        )
    }

    public static func write(_ value: Status, into buf: inout [UInt8]) {
        FfiConverterTypeMode.write(value.mode, into: &buf)
        FfiConverterTypeHeadlightError.write(value.error, into: &buf)
    }
}


public func FfiConverterTypeStatus_lift(_ buf: RustBuffer) throws -> Status {
    return try FfiConverterTypeStatus.lift(buf)
}

public func FfiConverterTypeStatus_lower(_ value: Status) -> RustBuffer {
    return FfiConverterTypeStatus.lower(value)
}


public struct Version {
    public var hw: Hardware
    public var fw: Firmware

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hw: Hardware, fw: Firmware) {
        self.hw = hw
        self.fw = fw
    }
}


extension Version: Equatable, Hashable {
    public static func ==(lhs: Version, rhs: Version) -> Bool {
        if lhs.hw != rhs.hw {
            return false
        }
        if lhs.fw != rhs.fw {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hw)
        hasher.combine(fw)
    }
}


public struct FfiConverterTypeVersion: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Version {
        return try Version(
            hw: FfiConverterTypeHardware.read(from: &buf), 
            fw: FfiConverterTypeFirmware.read(from: &buf)
        )
    }

    public static func write(_ value: Version, into buf: inout [UInt8]) {
        FfiConverterTypeHardware.write(value.hw, into: &buf)
        FfiConverterTypeFirmware.write(value.fw, into: &buf)
    }
}


public func FfiConverterTypeVersion_lift(_ buf: RustBuffer) throws -> Version {
    return try FfiConverterTypeVersion.lift(buf)
}

public func FfiConverterTypeVersion_lower(_ value: Version) -> RustBuffer {
    return FfiConverterTypeVersion.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AppError {
    
    case none
    case invalidPacket
    case sendFault
    case tooFast
}

public struct FfiConverterTypeAppError: FfiConverterRustBuffer {
    typealias SwiftType = AppError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AppError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .none
        
        case 2: return .invalidPacket
        
        case 3: return .sendFault
        
        case 4: return .tooFast
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AppError, into buf: inout [UInt8]) {
        switch value {
        
        
        case .none:
            writeInt(&buf, Int32(1))
        
        
        case .invalidPacket:
            writeInt(&buf, Int32(2))
        
        
        case .sendFault:
            writeInt(&buf, Int32(3))
        
        
        case .tooFast:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeAppError_lift(_ buf: RustBuffer) throws -> AppError {
    return try FfiConverterTypeAppError.lift(buf)
}

public func FfiConverterTypeAppError_lower(_ value: AppError) -> RustBuffer {
    return FfiConverterTypeAppError.lower(value)
}


extension AppError: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ConfigError {
    
    case gain
    case pwmFreq
    case maxTarget
    case startupTarget
    case throttleBounds
}

public struct FfiConverterTypeConfigError: FfiConverterRustBuffer {
    typealias SwiftType = ConfigError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConfigError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .gain
        
        case 2: return .pwmFreq
        
        case 3: return .maxTarget
        
        case 4: return .startupTarget
        
        case 5: return .throttleBounds
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConfigError, into buf: inout [UInt8]) {
        switch value {
        
        
        case .gain:
            writeInt(&buf, Int32(1))
        
        
        case .pwmFreq:
            writeInt(&buf, Int32(2))
        
        
        case .maxTarget:
            writeInt(&buf, Int32(3))
        
        
        case .startupTarget:
            writeInt(&buf, Int32(4))
        
        
        case .throttleBounds:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeConfigError_lift(_ buf: RustBuffer) throws -> ConfigError {
    return try FfiConverterTypeConfigError.lift(buf)
}

public func FfiConverterTypeConfigError_lower(_ value: ConfigError) -> RustBuffer {
    return FfiConverterTypeConfigError.lower(value)
}


extension ConfigError: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Firmware {
    
    case v0p1
}

public struct FfiConverterTypeFirmware: FfiConverterRustBuffer {
    typealias SwiftType = Firmware

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Firmware {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .v0p1
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Firmware, into buf: inout [UInt8]) {
        switch value {
        
        
        case .v0p1:
            writeInt(&buf, Int32(1))
        
        }
    }
}


public func FfiConverterTypeFirmware_lift(_ buf: RustBuffer) throws -> Firmware {
    return try FfiConverterTypeFirmware.lift(buf)
}

public func FfiConverterTypeFirmware_lower(_ value: Firmware) -> RustBuffer {
    return FfiConverterTypeFirmware.lower(value)
}


extension Firmware: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Hardware {
    
    case v2Rev0
    case v2Rev1
    case v2Rev3
}

public struct FfiConverterTypeHardware: FfiConverterRustBuffer {
    typealias SwiftType = Hardware

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Hardware {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .v2Rev0
        
        case 2: return .v2Rev1
        
        case 3: return .v2Rev3
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Hardware, into buf: inout [UInt8]) {
        switch value {
        
        
        case .v2Rev0:
            writeInt(&buf, Int32(1))
        
        
        case .v2Rev1:
            writeInt(&buf, Int32(2))
        
        
        case .v2Rev3:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeHardware_lift(_ buf: RustBuffer) throws -> Hardware {
    return try FfiConverterTypeHardware.lift(buf)
}

public func FfiConverterTypeHardware_lower(_ value: Hardware) -> RustBuffer {
    return FfiConverterTypeHardware.lower(value)
}


extension Hardware: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum HeadlightError {
    
    case none
    case config(e: ConfigError)
    case runtime(e: RuntimeError)
}

public struct FfiConverterTypeHeadlightError: FfiConverterRustBuffer {
    typealias SwiftType = HeadlightError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HeadlightError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .none
        
        case 2: return .config(
            e: try FfiConverterTypeConfigError.read(from: &buf)
        )
        
        case 3: return .runtime(
            e: try FfiConverterTypeRuntimeError.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HeadlightError, into buf: inout [UInt8]) {
        switch value {
        
        
        case .none:
            writeInt(&buf, Int32(1))
        
        
        case let .config(e):
            writeInt(&buf, Int32(2))
            FfiConverterTypeConfigError.write(e, into: &buf)
            
        
        case let .runtime(e):
            writeInt(&buf, Int32(3))
            FfiConverterTypeRuntimeError.write(e, into: &buf)
            
        }
    }
}


public func FfiConverterTypeHeadlightError_lift(_ buf: RustBuffer) throws -> HeadlightError {
    return try FfiConverterTypeHeadlightError.lift(buf)
}

public func FfiConverterTypeHeadlightError_lower(_ value: HeadlightError) -> RustBuffer {
    return FfiConverterTypeHeadlightError.lower(value)
}


extension HeadlightError: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Mode {
    
    case idle
    case running
    case throttling
    case fault
}

public struct FfiConverterTypeMode: FfiConverterRustBuffer {
    typealias SwiftType = Mode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .idle
        
        case 2: return .running
        
        case 3: return .throttling
        
        case 4: return .fault
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Mode, into buf: inout [UInt8]) {
        switch value {
        
        
        case .idle:
            writeInt(&buf, Int32(1))
        
        
        case .running:
            writeInt(&buf, Int32(2))
        
        
        case .throttling:
            writeInt(&buf, Int32(3))
        
        
        case .fault:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeMode_lift(_ buf: RustBuffer) throws -> Mode {
    return try FfiConverterTypeMode.lift(buf)
}

public func FfiConverterTypeMode_lower(_ value: Mode) -> RustBuffer {
    return FfiConverterTypeMode.lower(value)
}


extension Mode: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Request {
    
    case status
    case control
    case monitor
    case config
}

public struct FfiConverterTypeRequest: FfiConverterRustBuffer {
    typealias SwiftType = Request

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Request {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .status
        
        case 2: return .control
        
        case 3: return .monitor
        
        case 4: return .config
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Request, into buf: inout [UInt8]) {
        switch value {
        
        
        case .status:
            writeInt(&buf, Int32(1))
        
        
        case .control:
            writeInt(&buf, Int32(2))
        
        
        case .monitor:
            writeInt(&buf, Int32(3))
        
        
        case .config:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeRequest_lift(_ buf: RustBuffer) throws -> Request {
    return try FfiConverterTypeRequest.lift(buf)
}

public func FfiConverterTypeRequest_lower(_ value: Request) -> RustBuffer {
    return FfiConverterTypeRequest.lower(value)
}


extension Request: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Reset {
    
    case now
    case factory
}

public struct FfiConverterTypeReset: FfiConverterRustBuffer {
    typealias SwiftType = Reset

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Reset {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .now
        
        case 2: return .factory
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Reset, into buf: inout [UInt8]) {
        switch value {
        
        
        case .now:
            writeInt(&buf, Int32(1))
        
        
        case .factory:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeReset_lift(_ buf: RustBuffer) throws -> Reset {
    return try FfiConverterTypeReset.lift(buf)
}

public func FfiConverterTypeReset_lower(_ value: Reset) -> RustBuffer {
    return FfiConverterTypeReset.lower(value)
}


extension Reset: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RuntimeError {
    
    case flash
    case overcurrent
    case overtemperature
    case invariantLoad
    case arithmeticError
}

public struct FfiConverterTypeRuntimeError: FfiConverterRustBuffer {
    typealias SwiftType = RuntimeError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RuntimeError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .flash
        
        case 2: return .overcurrent
        
        case 3: return .overtemperature
        
        case 4: return .invariantLoad
        
        case 5: return .arithmeticError
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RuntimeError, into buf: inout [UInt8]) {
        switch value {
        
        
        case .flash:
            writeInt(&buf, Int32(1))
        
        
        case .overcurrent:
            writeInt(&buf, Int32(2))
        
        
        case .overtemperature:
            writeInt(&buf, Int32(3))
        
        
        case .invariantLoad:
            writeInt(&buf, Int32(4))
        
        
        case .arithmeticError:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeRuntimeError_lift(_ buf: RustBuffer) throws -> RuntimeError {
    return try FfiConverterTypeRuntimeError.lift(buf)
}

public func FfiConverterTypeRuntimeError_lower(_ value: RuntimeError) -> RustBuffer {
    return FfiConverterTypeRuntimeError.lower(value)
}


extension RuntimeError: Equatable, Hashable {}



fileprivate struct FfiConverterOptionTypeConfig: FfiConverterRustBuffer {
    typealias SwiftType = Config?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeConfig.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeConfig.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeControl: FfiConverterRustBuffer {
    typealias SwiftType = Control?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeControl.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeControl.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeMonitor: FfiConverterRustBuffer {
    typealias SwiftType = Monitor?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMonitor.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMonitor.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeProperties: FfiConverterRustBuffer {
    typealias SwiftType = Properties?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeProperties.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeProperties.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeStatus: FfiConverterRustBuffer {
    typealias SwiftType = Status?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeStatus.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeStatus.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeAppError: FfiConverterRustBuffer {
    typealias SwiftType = AppError?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAppError.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAppError.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

public func deserializeStdAppError(buf: Data)  -> AppError? {
    return try!  FfiConverterOptionTypeAppError.lift(
        try! rustCall() {
    uniffi_common_fn_func_deserialize_std_app_error(
        FfiConverterData.lower(buf),$0)
}
    )
}

public func deserializeStdConfig(buf: Data)  -> Config? {
    return try!  FfiConverterOptionTypeConfig.lift(
        try! rustCall() {
    uniffi_common_fn_func_deserialize_std_config(
        FfiConverterData.lower(buf),$0)
}
    )
}

public func deserializeStdControl(buf: Data)  -> Control? {
    return try!  FfiConverterOptionTypeControl.lift(
        try! rustCall() {
    uniffi_common_fn_func_deserialize_std_control(
        FfiConverterData.lower(buf),$0)
}
    )
}

public func deserializeStdMonitor(buf: Data)  -> Monitor? {
    return try!  FfiConverterOptionTypeMonitor.lift(
        try! rustCall() {
    uniffi_common_fn_func_deserialize_std_monitor(
        FfiConverterData.lower(buf),$0)
}
    )
}

public func deserializeStdProperties(buf: Data)  -> Properties? {
    return try!  FfiConverterOptionTypeProperties.lift(
        try! rustCall() {
    uniffi_common_fn_func_deserialize_std_properties(
        FfiConverterData.lower(buf),$0)
}
    )
}

public func deserializeStdStatus(buf: Data)  -> Status? {
    return try!  FfiConverterOptionTypeStatus.lift(
        try! rustCall() {
    uniffi_common_fn_func_deserialize_std_status(
        FfiConverterData.lower(buf),$0)
}
    )
}

public func sampleToCelsius(sample: UInt16)  -> UInt8 {
    return try!  FfiConverterUInt8.lift(
        try! rustCall() {
    uniffi_common_fn_func_sample_to_celsius(
        FfiConverterUInt16.lower(sample),$0)
}
    )
}

public func serializeStdConfig(cmd: Config)  -> Data {
    return try!  FfiConverterData.lift(
        try! rustCall() {
    uniffi_common_fn_func_serialize_std_config(
        FfiConverterTypeConfig.lower(cmd),$0)
}
    )
}

public func serializeStdControl(cmd: Control)  -> Data {
    return try!  FfiConverterData.lift(
        try! rustCall() {
    uniffi_common_fn_func_serialize_std_control(
        FfiConverterTypeControl.lower(cmd),$0)
}
    )
}

public func serializeStdRequest(cmd: Request)  -> Data {
    return try!  FfiConverterData.lift(
        try! rustCall() {
    uniffi_common_fn_func_serialize_std_request(
        FfiConverterTypeRequest.lower(cmd),$0)
}
    )
}

public func serializeStdReset(cmd: Reset)  -> Data {
    return try!  FfiConverterData.lift(
        try! rustCall() {
    uniffi_common_fn_func_serialize_std_reset(
        FfiConverterTypeReset.lower(cmd),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_common_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_common_checksum_func_deserialize_std_app_error() != 31745) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_deserialize_std_config() != 37241) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_deserialize_std_control() != 33196) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_deserialize_std_monitor() != 12537) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_deserialize_std_properties() != 1762) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_deserialize_std_status() != 64491) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_sample_to_celsius() != 1624) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_serialize_std_config() != 14897) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_serialize_std_control() != 3723) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_serialize_std_request() != 53552) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_common_checksum_func_serialize_std_reset() != 20866) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}